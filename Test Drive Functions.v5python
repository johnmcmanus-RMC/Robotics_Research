{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeftFront = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nRightFront = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nLeftRear = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nRightRear = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nDistance = Distance(Ports.PORT19)\n# vex-vision-config:begin\nVision__REDBALL = Signature(1, 8623, 10263, 9443,-1553, -915, -1234,3, 0)\nVision__YELLOWBALL = Signature(2, 675, 1575, 1125,-4767, -4181, -4474,2.5, 0)\nVision__SIG_3 = Signature(3, 0, 0, 0,0, 0, 0,3, 0)\nVision = Vision(Ports.PORT20, 50, Vision__REDBALL, Vision__YELLOWBALL, Vision__SIG_3)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\ndef when_started1():\n    # Define Global variables\n    # 1 turn = 12 inches in forward, reverse, and drift (left and right)\n    # 1 turn = 6 inches in diagonal\n    # 1.15 turns = 90 degrees in rotation\n \n    global turns\n    global inchesToMove\n    global degreesToTurn\n\n    # Set up motors\n    LeftFront.set_stopping(BRAKE)\n    RightFront.set_stopping(BRAKE)\n    LeftRear.set_stopping(BRAKE)\n    RightRear.set_stopping(BRAKE)\n\n    # sert motor speeds\n    LeftFront.set_velocity(35, PERCENT)\n    RightFront.set_velocity(35, PERCENT)\n    LeftRear.set_velocity(35, PERCENT)\n    RightRear.set_velocity(35, PERCENT)\n\n    # set drian display\n    brain.screen.set_font(FontType.MONO20)\n    brain.screen.set_pen_color(Color.BLUE)\n    brain.screen.print(\"Starting\")\n    brain.screen.next_row()\n    wait(1, SECONDS)\n\n# Drive Forward: Drive forward\n# All motors spin forward\n# @parameter inches: number of inches\ndef driveForward(inches):\n    numTurns = inches / 12.0\n    brain.screen.print(\"Drive Forward\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drive Reverse: Drive forward\n# All motors spin reverse\n# @parameter inches: number of inches to move\ndef driveReverse(inches):\n    numTurns = inches / 12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drive Reverse\")\n    brain.screen.next_row()\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Turn right: Tank turn, clockwise\n# Left front and left rear spin forward\n# Right front and right rear spin in reverse\n# @parameter degrees: number of degrees (clockwise) to rotate\ndef turnRight(degrees):\n    temp = degrees / 90.0 \n    numTurns = temp * 1.16 # 1.16 rotations required for 90 degree turn\n    brain.screen.print(\"Turn Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Turn left: tank turn, counter clockwise\n# Left front and left rear spin reverse\n# Right front and right rear spin forward\n# @parameter degrees: number of degrees (counter-clockwise) to rotate\ndef turnLeft(degrees):\n    temp = degrees / 90.0 \n    numTurns = temp * 1.16 # 1.16 rotations required for 90 degree turn\n    brain.screen.print(\"TurnLeft\")\n    brain.screen.next_row()\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drift Right: Move the robot right\n# Left front and right rear spin forward\n# Right front and left rear spin in reverse\n# @parameter inches: number of inches to move right\ndef driftRight(inches):\n    numTurns = inches /12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drift Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drift Left: Move the robot left\n# Left front and right rear spin in reverse\n# Right front and left rear spin forward\n# @parameter inches: number of inches to move left\ndef driftLeft(inches):\n    numTurns = inches /12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drift Left\")\n    brain.screen.next_row()\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n        \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Diagonal Right: Move the robot left\n# Left front and right rear spin forward\n# @parameter numTurns: number of inches to move\ndef diagonalRight(inches):\n    numTurns = inches / 6.0 # one turn of the motor = 6.0 inches movement\n    brain.screen.print(\"Diagonal Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n        \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Diagonal Left: Move the robot right\n# Right front and left rear spin forward\n# @parameter inches: number of inches to move\ndef diagonalLeft(inches):\n    numTurns = inches / 6.0 # one turn of the motor = 6.0 inches movement\n    brain.screen.print(\"Diagonal Left\")\n    brain.screen.next_row()\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n\n    # Wait for the motors to complete their spin\n    while not RightFront.is_done(): \n        pass\n    return()\n\ndef main():\n    # Initialize the number of inches to move\n    inchesToMove = 12\n \n    driftRight(inchesToMove)\n    wait(1, SECONDS)\n    \n    driftLeft(inchesToMove)\n    wait(1, SECONDS)\n\n    inchesToMove = 24\n    diagonalRight(inchesToMove)\n    wait(1, SECONDS)\n    \n    diagonalLeft(inchesToMove)\n    wait(1, SECONDS)\n\n# call the main module\nmain()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"LeftFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"RightFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"LeftRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"RightRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[20],"name":"Vision","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"REDBALL\",\"parameters\":{\"uMin\":8623,\"uMax\":10263,\"uMean\":9443,\"vMin\":-1553,\"vMax\":-915,\"vMean\":-1234,\"rgb\":1,\"type\":0,\"name\":\"REDBALL\"},\"range\":3},{\"name\":\"YELLOWBALL\",\"parameters\":{\"uMin\":675,\"uMax\":1575,\"uMean\":1125,\"vMin\":-4767,\"vMax\":-4181,\"vMean\":-4474,\"rgb\":1,\"type\":0,\"name\":\"YELLOWBALL\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":3},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}