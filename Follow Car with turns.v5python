{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nDistance = Distance(Ports.PORT20)\n# vex-vision-config:begin\nVision__BLUEBALL = Signature(1, -3475, -1311, -2393,5097, 11589, 8343,1.3, 0)\nVision__PINKBALL = Signature(2, 6217, 7569, 6893,2819, 3341, 3080,3.4, 0)\nVision__YELLOWBALL = Signature(3, -639, -47, -343,-4609, -3503, -4056,3, 0)\nVision__GREENBALL = Signature(4, -9321, -7047, -8184,-7357, -4783, -6070,2.6, 0)\nVision__ORANGEBALL = Signature(5, 1657, 4265, 2961,-2489, -2005, -2247,1.7, 0)\nVision__REDBALL = Signature(6, 6477, 6931, 6704,-1153, -519, -836,2.9, 0)\nVision = Vision(Ports.PORT9, 50, Vision__BLUEBALL, Vision__PINKBALL, Vision__YELLOWBALL, Vision__GREENBALL, Vision__ORANGEBALL, Vision__REDBALL)\n# vex-vision-config:end\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\ndef main():\n    followDist=12\n    done=False\n    currentPercent=25\n    newPercent=0\n    drivetrain.set_drive_velocity(currentPercent)\n    drivetrain.set_turn_velocity(30)\n    drivetrain.drive(FORWARD)\n    while not done:\n        brain.screen.print(Distance.object_distance(INCHES))\n        if Distance.is_object_detected() and abs(Distance.object_distance(INCHES)-followDist)>2:\n            #(min(Distance.object_distance(INCHES),54))/5\n            newPercent=currentPercent-followDist-20*Distance.object_velocity()\n            drivetrain.set_drive_velocity(newPercent)\n            drivetrain.drive(FORWARD)\n            currentPercent=newPercent\n            brain.screen.print(currentPercent)\n            brain.screen.clear_screen()\n            brain.screen.set_cursor(1,1)\n        \n        \n        vexcode_visionsensor_objects = Vision.take_snapshot(Vision__REDBALL)\n        if vexcode_visionsensor_objects is not None:\n            center = Vision.largest_object().centerX\n            brain.screen.print(center)\n            brain.screen.next_row()\n            # Center the Claw on the Object\n            if center>180:\n                angle1=math.atan(((180-center)/136)*math.tan(28.41*math.pi/180))\n                angle1=angle1*180/math.pi\n            else:\n                angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n                angle1=angle1*180/math.pi\n            if abs(angle1)>7:\n                if angle1 < 0:\n                    drivetrain.turn_for(RIGHT,abs(angle1),DEGREES)\n                else:\n                    drivetrain.turn_for(LEFT,abs(angle1),DEGREES)\n                drivetrain.drive(FORWARD)\n        elif Distance.is_object_detected():\n            brain.screen.print('No Object seen, go')\n            \n        else:\n            brain.screen.print('No Object seen or detected, stop')\n            drivetrain.stop()\n        wait(0.1, SECONDS)\n\n\n    \n# call the main module\nmain()\n","textLanguage":"python","rconfig":[{"port":[20],"name":"Distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[9],"name":"Vision","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBALL\",\"parameters\":{\"uMin\":-3475,\"uMax\":-1311,\"uMean\":-2393,\"vMin\":5097,\"vMax\":11589,\"vMean\":8343,\"rgb\":1,\"type\":0,\"name\":\"BLUEBALL\"},\"range\":1.3},{\"name\":\"PINKBALL\",\"parameters\":{\"uMin\":6217,\"uMax\":7569,\"uMean\":6893,\"vMin\":2819,\"vMax\":3341,\"vMean\":3080,\"rgb\":1,\"type\":0,\"name\":\"PINKBALL\"},\"range\":3.4},{\"name\":\"YELLOWBALL\",\"parameters\":{\"uMin\":-639,\"uMax\":-47,\"uMean\":-343,\"vMin\":-4609,\"vMax\":-3503,\"vMean\":-4056,\"rgb\":1,\"type\":0,\"name\":\"YELLOWBALL\"},\"range\":3},{\"name\":\"GREENBALL\",\"parameters\":{\"uMin\":-9321,\"uMax\":-7047,\"uMean\":-8184,\"vMin\":-7357,\"vMax\":-4783,\"vMean\":-6070,\"rgb\":1,\"type\":0,\"name\":\"GREENBALL\"},\"range\":2.6},{\"name\":\"ORANGEBALL\",\"parameters\":{\"uMin\":1657,\"uMax\":4265,\"uMean\":2961,\"vMin\":-2489,\"vMax\":-2005,\"vMean\":-2247,\"rgb\":1,\"type\":0,\"name\":\"ORANGEBALL\"},\"range\":1.7},{\"name\":\"REDBALL\",\"parameters\":{\"uMin\":6477,\"uMax\":6931,\"uMean\":6704,\"vMin\":-1153,\"vMax\":-519,\"vMean\":-836,\"rgb\":1,\"type\":0,\"name\":\"REDBALL\"},\"range\":2.9},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1,10,2],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":2,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}