{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 165, MM, 1)\nArmMotor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nClawMotor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nBumperRight = Bumper(brain.three_wire_port.a)\nBumperLeft = Bumper(brain.three_wire_port.b)\n# vex-vision-config:begin\nVision__BLUEBALL = Signature(1, -3475, -1311, -2393,5097, 11589, 8343,1.3, 0)\nVision__PINKBALL = Signature(2, 6217, 7569, 6893,2819, 3341, 3080,3.4, 0)\nVision__YELLOWBALL = Signature(3, -639, -47, -343,-4609, -3503, -4056,3, 0)\nVision__GREENBALL = Signature(4, -9321, -7047, -8184,-7357, -4783, -6070,2.6, 0)\nVision__ORANGEBALL = Signature(5, 1657, 4265, 2961,-2489, -2005, -2247,1.7, 0)\nVision__REDBALL = Signature(6, 7725, 9067, 8396,-1429, -999, -1214,2.9, 0)\nVision = Vision(Ports.PORT9, 50, Vision__BLUEBALL, Vision__PINKBALL, Vision__YELLOWBALL, Vision__GREENBALL, Vision__ORANGEBALL, Vision__REDBALL)\n# vex-vision-config:end\nrange_finder_g = Sonar(brain.three_wire_port.g)\ndistance_20 = Distance(Ports.PORT20)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_visionsensor_objects = None\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_visionsensor_object_index = None\nmessage1 = Event()\nmyVariable = 0\ncenter = 0\nDistanceExplored = 0\nObjectsFound = 0\nNum_Objects = 0\npath=[['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6]]\npathFollowed=[]\noffPath=[]\nstep=0\ntotalObjects=2\nobjectsReturned=0\nfinishedPath=False\nfoundAll=False\n\n# Takes a snapshot for each of the color signatures and stores them in a list\ndef take_snapshots():\n    signatures=[Vision__REDBALL,Vision__ORANGEBALL,Vision__YELLOWBALL,Vision__GREENBALL,Vision__PINKBALL,Vision__BLUEBALL]\n    objectsFound=[0]*len(signatures)\n    for i in range(len(signatures)):\n        objectsFound[i] = Vision.take_snapshot(signatures[i])\n    return objectsFound\n\n# returns the maximum width of an object in the visionObject\n# @parameter visionObject, a vision object from the vision sensor\n# @return, the the maximum width of an object in the visionObject\ndef printProperties(visionObject):\n    maxWidth=0\n    result = isinstance(visionObject, tuple)\n    if result:\n        if (len(visionObject)) > 1:\n            for i in range(len(visionObject)): \n                if visionObject[i].width > maxWidth:\n                    maxWidth= visionObject[i].width\n        else:\n            if visionObject[0].width > maxWidth:\n                maxWidth= visionObject[0].width\n    \n    # if Distance.is_object_detected():\n    #     distanceToObject = Distance.object_distance(INCHES)\n    #     brain.screen.print(\"The distance to the object is: %.2f inches\" % distanceToObject)\n    #     brain.screen.next_row()\n    # wait(3, SECONDS)\n    return maxWidth\n\n# Determines which color signature ball is closest\n#@parameter objectsFound, list of vision objects of each color in the order Red, Orange, Yellow, Green, Blue, Pink\n#@return, the color signature of the closest object or None if no objects found\ndef findClosest(objectsFound):\n    abbreviations=['R','O','Y','G','P','B','None']\n    # Establish a list of signatures for the color objects with the last being none\n    signatures=[Vision__REDBALL,Vision__ORANGEBALL,Vision__YELLOWBALL,Vision__GREENBALL,Vision__PINKBALL,Vision__BLUEBALL,None]\n    # Establish variables for keeping track of widest (closest) object\n    maxWidth=0 \n    maxSignature=-1 # Start with no objects\n    for j in range(len(objectsFound)):\n        wid=printProperties(objectsFound[j])\n        if wid >maxWidth:\n            maxWidth=wid\n            maxSignature=j\n    brain.screen.next_row()\n    brain.screen.print(abbreviations[maxSignature])\n    brain.screen.next_row\n    return signatures[maxSignature] # Return the signature of the closest object or None if no objects found\n\n# Centers the robot's claw on an object\n# @param objectSignature- the signature of the object to center on\ndef centerOnObject(objectSignature):\n    vexcode_visionsensor_objects = Vision.take_snapshot(objectSignature)\n    wait(0.25, SECONDS)\n    brain.screen.print(len(vexcode_visionsensor_objects) if vexcode_visionsensor_objects else 0,)\n    brain.screen.next_row()\n    center = Vision.largest_object().centerX\n    brain.screen.print(center)\n    brain.screen.next_row()\n    # Center the Claw on the Object\n    if center>180:\n        angle1=math.atan(((180-center)/136)*math.tan(28.41*math.pi/180))\n        angle1=angle1*180/math.pi\n    else:\n        angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n        angle1=angle1*180/math.pi\n    brain.screen.print(angle1)\n    wait(5,SECONDS)\n    if angle1 < 0:\n        drivetrain.turn_for(RIGHT,abs(angle1),DEGREES)\n        offPath.append(['turn',15,RIGHT,abs(angle1)])\n    else:\n        drivetrain.turn_for(LEFT,abs(angle1),DEGREES)\n        offPath.append(['turn',15,LEFT,abs(angle1)])\n\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    vexcode_visionsensor_objects = Vision.take_snapshot(objectSignature)\n    wait(5, SECONDS)\n    center = Vision.largest_object().centerX\n    brain.screen.print(center)\n    brain.screen.next_row()\n    # Center the Claw on the Object\n    if center>180:\n        angle1=math.atan(((180-center)/180)*math.tan(28.41*math.pi/180))\n        angle1=angle1*180/math.pi\n    else:\n        angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n        angle1=angle1*180/math.pi\n    brain.screen.print(angle1)\n    brain.screen.next_row()\n\n    wait(2, SECONDS)\n    i=1\n    while abs(angle1)>1 and i<4:\n        if angle1 < 0:\n            drivetrain.turn_for(RIGHT,abs(angle1),DEGREES)\n            offPath.append(['turn',15,RIGHT,abs(angle1)])\n        else:\n            drivetrain.turn_for(LEFT,abs(angle1),DEGREES)\n            offPath.append(['turn',15,LEFT,abs(angle1)])\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        wait(0.5, SECONDS)\n        vexcode_visionsensor_objects = Vision.take_snapshot(objectSignature)\n        center = Vision.largest_object().centerX\n        brain.screen.print(center)\n        brain.screen.next_row()\n        # Center the Claw on the Object\n        if center>180:\n            angle1=math.atan(((180-center)/180)*math.tan(28.41*math.pi/180))\n            angle1=angle1*180/math.pi\n        else:\n            angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n            angle1=angle1*180/math.pi\n        brain.screen.print(angle1)\n        brain.screen.next_row()\n        brain.screen.print(Distance.object_distance(INCHES))\n        wait(1,SECONDS)\n        i=i+1\n    return\n\n# Interpets a path step into a drivetrain movement\n# @param pathStep= [type, speed, direction, distance]\ndef followPath(pathStep):\n    \n    if pathStep[0]=='turn':\n        drivetrain.set_turn_velocity(pathStep[1], PERCENT)\n        drivetrain.turn_for(pathStep[2], pathStep[3], DEGREES)\n    else: # pathStep[0]='drive'\n        drivetrain.set_drive_velocity(pathStep[1], PERCENT)\n        drivetrain.drive_for(pathStep[2], pathStep[3], INCHES)\n    return\n\n# Returns the robot to its starting location by reversing the steps in the path\n# @param step- number of steps taken in the path so far\ndef returnHome(step):\n    global path\n    for i in range(step,-1, -1):\n        #invert step\n        elem=path[i]\n        if elem[0]=='turn':\n            if elem[2]==RIGHT:\n                elem[2]=LEFT\n            else:\n                elem[2]=RIGHT\n        else:\n            if elem[2]==FORWARD:\n                elem[2]=REVERSE\n            else:\n                elem[2]=FORWARD\n        followPath(elem)\n    return\n\n# Returns the robot to the path by reversing the steps in the offPath list, used after picking up an object\ndef returnToPath():\n    global offPath\n    for i in range(len(offPath)-1,-1,-1):\n        #invert step\n        elem=offPath[i]\n        if elem[0]=='turn':\n            if elem[2]==RIGHT:\n                elem[2]=LEFT\n            else:\n                elem[2]=RIGHT\n        else:\n            if elem[2]==FORWARD:\n                elem[2]=REVERSE\n            else:\n                elem[2]=FORWARD\n        followPath(elem)\n    #Clear offPath\n    offPath=[]\n    return\n\n#Picks up an object that that is centered on its claw\ndef pickUp():\n    #Open Claw and Drive to Object\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    drivetrain.set_drive_velocity(10, PERCENT)\n    AngleDistance = distance_20.object_distance(INCHES)-5\n    ArmMotor.spin_to_position(1, DEGREES)\n    drivetrain.drive_for(FORWARD,AngleDistance,INCHES)\n    offPath.append(['drive',10,FORWARD, AngleDistance])\n    wait(1, SECONDS)\n    ClawMotor.spin_for(FORWARD, 270, DEGREES)\n    wait(1, SECONDS)\n    ArmMotor.spin_for(FORWARD, 180, DEGREES)\n    wait(1, SECONDS)\n\n#Calibrates the claw by putting it to a know position\ndef Calibrate_Claw():\n    # Configure the Arm and Claw Motors\n    brain.screen.print(\"Initialize the Claw and Arm\")\n    ArmMotor.set_timeout(2, SECONDS)\n    ArmMotor.set_position(0, DEGREES)\n    ArmMotor.set_stopping(BRAKE)\n    ArmMotor.set_velocity(25, PERCENT)\n    ClawMotor.set_timeout(2, SECONDS)\n    ClawMotor.set_position(0, DEGREES)\n    ClawMotor.set_stopping(BRAKE)\n    ClawMotor.set_velocity(25, PERCENT)\n    wait(1, SECONDS)\n    ArmMotor.spin_to_position(360, DEGREES)\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    wait(1, SECONDS)\n    ClawMotor.spin_for(FORWARD, 360, DEGREES)\n    wait(2, SECONDS)\n    \n    brain.screen.print(\"Complete\")\n\ndef main():\n    global path, offPath, step, totalObjects, objectsReturned, finishedPath, foundAll\n    # Set the Drive and Turn Speeds\n    calibrate_drivetrain()\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.set_turn_velocity(15, PERCENT)\n    drivetrain.set_rotation(0, DEGREES)\n    Calibrate_Claw()\n    #Decompose path into small steps\n    while not finishedPath or not foundAll:\n        objectsFound=take_snapshots()\n        #Check if object found/ the signuatre of the closest object\n        target=findClosest(objectsFound)\n        if target is not None:\n            brain.screen.print('Object Found')\n            centerOnObject(target)\n            brain.screen.print('Centered')\n            wait(2, SECONDS)\n            #pick up object\n            pickUp()\n            # return object to home\n            returnToPath()\n            returnHome(step)\n            #Open claw\n            drivetrain.turn_to_heading(180, DEGREES)\n            wait(1, SECONDS)\n            ArmMotor.spin_to_position(10, DEGREES)\n            wait(0.5, SECONDS)\n            ClawMotor.spin_for(REVERSE, 360, DEGREES)\n            ArmMotor.spin_to_position(360, DEGREES)\n            wait(0.5, SECONDS)\n            drivetrain.turn_to_heading(0, DEGREES)\n            wait(1, SECONDS)\n\n            objectsReturned=objectsReturned+1\n            # drive back to spot on path\n            for i in range(step):\n                followPath(path[i])\n        else:\n            followPath(path[step])\n            step=step+1\n        if step==len(path)-1:\n            finishedPath=True\n        if objectsReturned==totalObjects:\n            foundAll=True\n        wait(1,SECONDS)\n    \n    \n# call the main module\nmain()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"LeftFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"RightFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"LeftRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"RightRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[9],"name":"Vision","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBALL\",\"parameters\":{\"uMin\":-3475,\"uMax\":-1311,\"uMean\":-2393,\"vMin\":5097,\"vMax\":11589,\"vMean\":8343,\"rgb\":1,\"type\":0,\"name\":\"BLUEBALL\"},\"range\":1.3},{\"name\":\"PINKBALL\",\"parameters\":{\"uMin\":6217,\"uMax\":7569,\"uMean\":6893,\"vMin\":2819,\"vMax\":3341,\"vMean\":3080,\"rgb\":11756424.89087809,\"type\":0,\"name\":\"PINKBALL\"},\"range\":3.4},{\"name\":\"YELLOWBALL\",\"parameters\":{\"uMin\":-639,\"uMax\":-47,\"uMean\":-343,\"vMin\":-4609,\"vMax\":-3503,\"vMean\":-4056,\"rgb\":12502151.703778677,\"type\":0,\"name\":\"YELLOWBALL\"},\"range\":3},{\"name\":\"GREENBALL\",\"parameters\":{\"uMin\":-9321,\"uMax\":-7047,\"uMean\":-8184,\"vMin\":-7357,\"vMax\":-4783,\"vMean\":-6070,\"rgb\":1,\"type\":0,\"name\":\"GREENBALL\"},\"range\":2.6},{\"name\":\"ORANGEBALL\",\"parameters\":{\"uMin\":1657,\"uMax\":4265,\"uMean\":2961,\"vMin\":-2489,\"vMax\":-2005,\"vMean\":-2247,\"rgb\":12556667.99595551,\"type\":0,\"name\":\"ORANGEBALL\"},\"range\":1.7},{\"name\":\"REDBALL\",\"parameters\":{\"uMin\":7725,\"uMax\":9067,\"uMean\":8396,\"vMin\":-1429,\"vMax\":-999,\"vMean\":-1214,\"rgb\":11295825.017408123,\"type\":0,\"name\":\"REDBALL\"},\"range\":2.9},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}