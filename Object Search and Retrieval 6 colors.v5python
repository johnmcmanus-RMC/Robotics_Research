{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 165, MM, 1)\nArmMotor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nClawMotor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nBumperRight = Bumper(brain.three_wire_port.a)\nBumperLeft = Bumper(brain.three_wire_port.b)\n# vex-vision-config:begin\nVisionSensor__GREEN_BALL = Signature(1, -7055, -5527, -6291,-6231, -5073, -5652,5.7, 0)\nVisionSensor__RED_BALL = Signature(2, 9969, 12337, 11153,-2127, -1741, -1934,1.9, 0)\nVisionSensor__BLUE_BALL = Signature(3, -3553, -2757, -3155,6553, 9363, 7958,3.2, 0)\nVisionSensor__YELLOW_BALL = Signature(4, 1251, 2431, 1841,-5393, -5061, -5227,3, 0)\nVisionSensor__ORANGE_BALL = Signature(5, 3139, 5029, 4084,-2617, -1911, -2264,1.4, 0)\nVisionSensor__PINK_BALL = Signature(6, 8119, 10161, 9140,763, 1213, 988,3, 0)\nVisionSensor__SIG_7 = Signature(7, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor = Vision(Ports.PORT9, 50, VisionSensor__GREEN_BALL, VisionSensor__RED_BALL, VisionSensor__BLUE_BALL, VisionSensor__YELLOW_BALL, VisionSensor__ORANGE_BALL, VisionSensor__PINK_BALL, VisionSensor__SIG_7)\n# vex-vision-config:end\nrange_finder_g = Sonar(brain.three_wire_port.g)\ndistance_20 = Distance(Ports.PORT20)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_visionsensor_objects = None\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_visionsensor_object_index = None\nmessage1 = Event()\nmyVariable = 0\ncenter = 0\nDistanceExplored = 0\nObjectsFound = 0\nNum_Objects = 0\nRedFound = 0\nYellowFound = 0\n\npath=[['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6],['drive',50,FORWARD,6]]\npathFollowed=[]\noffPath=[]\nstep=0\ntotalObjects=1\nobjectsReturned=0\nfinishedPath=False\nfoundAll=False\n\n\n# Takes a snapshot for each of the color signatures and stores them in a list\n#@return, a list of the vision objects of each color in the order Red, Orange, Yellow, Green, Blue, Pink\ndef take_snapshots():\n    signatures=[VisionSensor__RED_BALL,VisionSensor__ORANGE_BALL,VisionSensor__YELLOW_BALL,VisionSensor__GREEN_BALL,VisionSensor__BLUE_BALL,VisionSensor__PINK_BALL]\n    objectsFound=[0]*len(signatures)\n    for i in range(len(signatures)):\n        objectsFound[i] = VisionSensor.take_snapshot(signatures[i])\n    return objectsFound\n\n# returns the maximum width of an object in the visionObject\n# @parameter visionObject, a vision object from the vision sensor\n# @return, the the maximum width of an object in the visionObject\ndef printProperties(visionObject):\n    maxWidth=0 \n    result = isinstance(visionObject, tuple)\n    if result:\n        brain.screen.print('tuple')\n        if (len(visionObject)) > 1:\n            for i in range(len(visionObject)): \n                if visionObject[i].width > maxWidth:\n                    maxWidth= visionObject[i].width\n\n        else:\n            if visionObject[0].width > maxWidth:\n                maxWidth= visionObject[0].width\n    brain.screen.print(maxWidth)\n    return maxWidth\n\n\n# Determines which color signature ball is closest\n#@parameter objectsFound, list of vision objects of each color in the order Red, Orange, Yellow, Green, Blue, Pink\n#@return, the color signature of the closest object or None if no objects found\ndef findClosest(objectsFound):\n    # Establish a list of signatures for the color objects with the last being none\n    signatures=[VisionSensor__RED_BALL,VisionSensor__ORANGE_BALL,VisionSensor__YELLOW_BALL,VisionSensor__GREEN_BALL,VisionSensor__BLUE_BALL,VisionSensor__PINK_BALL, None]\n    # Establish variables for keeping track of widest (closest) object\n    maxWidth=0 \n    maxSignature=-1 # Start with no objects\n    for j in range(len(objectsFound)):\n        wid=printProperties(objectsFound[j])\n        if wid >maxWidth:\n            maxWidth=wid\n            maxSignature=j\n    return signatures[maxSignature] # Return the signature of the closest object or None if no objects found\n\n# Interpets a path step into a drivetrain movement\n# @param pathStep= [type, speed, direction, distance]\ndef followPath(pathStep):\n    \n    if pathStep[0]=='turn':\n        drivetrain.set_turn_velocity(pathStep[1], PERCENT)\n        drivetrain.turn_for(pathStep[2], pathStep[3], DEGREES)\n    else: # pathStep[0]='drive'\n        drivetrain.set_drive_velocity(pathStep[1], PERCENT)\n        drivetrain.drive_for(pathStep[2], pathStep[3], INCHES)\n    return\n\n# Returns the robot to its starting location by reversing the steps in the path\n# @param step- number of steps taken in the path so far\ndef returnHome(step):\n    global path\n    for i in range(step,-1, -1):\n        #invert step\n        elem=path[i]\n        if elem[0]=='turn':\n            if elem[2]==RIGHT:\n                elem[2]=LEFT\n            else:\n                elem[2]=RIGHT\n        else:\n            if elem[2]==FORWARD:\n                elem[2]=REVERSE\n            else:\n                elem[2]=FORWARD\n        followPath(elem)\n    return\n\n# Returns the robot to the path by reversing the steps in the offPath list, used after picking up an object\ndef returnToPath():\n    global offPath\n    for i in range(len(offPath)-1,-1,-1):\n        #invert step\n        elem=offPath[i]\n        if elem[0]=='turn':\n            if elem[2]==RIGHT:\n                elem[2]=LEFT\n            else:\n                elem[2]=RIGHT\n        else:\n            if elem[2]==FORWARD:\n                elem[2]=REVERSE\n            else:\n                elem[2]=FORWARD\n        followPath(elem)\n    #Clear offPath\n    offPath=[]\n    return\n\ndef main():\n    global path, offPath, step, totalObjects, objectsReturned, finishedPath, foundAll\n    # Set the Drive and Turn Speeds\n    calibrate_drivetrain()\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.set_turn_velocity(15, PERCENT)\n    drivetrain.set_rotation(0, DEGREES)\n    Calibrate_Claw()\n    #Decompose path into small steps\n    while not finishedPath or not foundAll:\n        followPath(path[step])\n        objectsFound=take_snapshots()\n        #Check if object found/ the signuatre of the closest object\n        target=findClosest(objectsFound)\n        if target is not None:\n            brain.screen.print('Object Found')\n            centerOnObject(target)\n            brain.screen.print('Centered')\n            wait(2, SECONDS)\n            #pick up object\n            pickUp()\n            # return object to home\n            returnToPath()\n            returnHome(step)\n            #Open claw\n            drivetrain.turn_to_heading(180, DEGREES)\n            wait(1, SECONDS)\n            ArmMotor.spin_to_position(10, DEGREES)\n            wait(0.5, SECONDS)\n            ClawMotor.spin_for(REVERSE, 360, DEGREES)\n            ArmMotor.spin_to_position(360, DEGREES)\n            wait(0.5, SECONDS)\n            drivetrain.turn_to_heading(0, DEGREES)\n            wait(1, SECONDS)\n\n            objectsReturned=objectsReturned+1\n            # drive back to spot on path\n            for i in range(step):\n                followPath(path[i])\n        \n        if step==len(path)-1:\n            finishedPath=True\n        if objectsReturned==totalObjects:\n            foundAll=True\n        step=step+1\n        wait(1,SECONDS)\n\ndef test():\n    objects=take_snapshots()\n    brain.screen.print(objects)\n    #brain.screen.print('done with snapshots')\n    wait(5,SECONDS)\n    #Check if object found/ the signuatre of the closest object\n    brain.screen.print('starting findClosest')\n    target=findClosest(objects)\n    brain.screen.print(str(target))\n    #brain.screen.print('finished findClosest')\n    if target is not None:\n        brain.screen.print('Object Found')\n        centerOnObject(target)\n\n#Picks up an object that that is centered on its claw\ndef pickUp():\n    #Open Claw and Drive to Object\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    drivetrain.set_drive_velocity(10, PERCENT)\n    AngleDistance = distance_20.object_distance(INCHES)-4\n    ArmMotor.spin_to_position(1, DEGREES)\n    drivetrain.drive_for(FORWARD,AngleDistance,INCHES)\n    offPath.append(['drive',10,FORWARD, AngleDistance])\n    wait(1, SECONDS)\n    ClawMotor.spin_for(FORWARD, 270, DEGREES)\n    wait(1, SECONDS)\n    ArmMotor.spin_for(FORWARD, 180, DEGREES)\n    wait(1, SECONDS)\n\n# Centers the robot's claw on an object\n# @param objectSignature- the signature of the object to center on\ndef centerOnObject(objectSignature):\n    vexcode_visionsensor_objects = VisionSensor.take_snapshot(objectSignature)\n    wait(0.25, SECONDS)\n    brain.screen.print(len(vexcode_visionsensor_objects) if vexcode_visionsensor_objects else 0,)\n    brain.screen.next_row()\n    center = VisionSensor.largest_object().centerX\n    brain.screen.print(center)\n    brain.screen.next_row()\n    # Center the Claw on the Object\n    if center>180:\n        angle1=math.atan(((180-center)/136)*math.tan(28.41*math.pi/180))\n        angle1=angle1*180/math.pi\n    else:\n        angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n        angle1=angle1*180/math.pi\n    brain.screen.print(angle1)\n    wait(5,SECONDS)\n    if angle1 < 0:\n        drivetrain.turn_for(RIGHT,abs(angle1),DEGREES)\n        offPath.append(['turn',15,RIGHT,abs(angle1)])\n    else:\n        drivetrain.turn_for(LEFT,abs(angle1),DEGREES)\n        offPath.append(['turn',15,LEFT,abs(angle1)])\n\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    vexcode_visionsensor_objects = VisionSensor.take_snapshot(objectSignature)\n    wait(5, SECONDS)\n    center = VisionSensor.largest_object().centerX\n    brain.screen.print(center)\n    brain.screen.next_row()\n    # Center the Claw on the Object\n    if center>180:\n        angle1=math.atan(((180-center)/180)*math.tan(28.41*math.pi/180))\n        angle1=angle1*180/math.pi\n    else:\n        angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n        angle1=angle1*180/math.pi\n    brain.screen.print(angle1)\n    brain.screen.next_row()\n\n    wait(2, SECONDS)\n    i=1\n    while abs(angle1)>1.5 and i<4:\n        if angle1 < 0:\n            drivetrain.turn_for(RIGHT,abs(angle1),DEGREES)\n            offPath.append(['turn',15,RIGHT,abs(angle1)])\n        else:\n            drivetrain.turn_for(LEFT,abs(angle1),DEGREES)\n            offPath.append(['turn',15,LEFT,abs(angle1)])\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        wait(0.5, SECONDS)\n        vexcode_visionsensor_objects = VisionSensor.take_snapshot(objectSignature)\n        center = VisionSensor.largest_object().centerX\n        brain.screen.print(center)\n        brain.screen.next_row()\n        # Center the Claw on the Object\n        if center>180:\n            angle1=math.atan(((180-center)/180)*math.tan(28.41*math.pi/180))\n            angle1=angle1*180/math.pi\n        else:\n            angle1=math.atan(((180-center)/180)*math.tan(37.59*math.pi/180))\n            angle1=angle1*180/math.pi\n        brain.screen.print(angle1)\n        brain.screen.next_row()\n        brain.screen.print(Distance.object_distance(INCHES))\n        wait(1,SECONDS)\n        i=i+1\n    return\n\n# def Pick_up_and_Return():\n#     global message1, myVariable, center, DistanceExplored, ObjectsFound, Num_Objects, RedFound, YellowFound, AngleDistance, vexcode_visionsensor_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_visionsensor_object_index\n#     wait(1, SECONDS)\n#     # Slowly Spin until a Red Object is Detected\n#     brain.screen.print(distance_20.object_distance(INCHES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n#     brain.screen.next_row()\n#     if RedFound == 1:\n#         vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_BALL)\n#     else:\n#         vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__YELLOW_BALL)\n#     wait(1, SECONDS)\n#     brain.screen.print(len(vexcode_visionsensor_objects) if vexcode_visionsensor_objects else 0, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n#     center = VisionSensor.largest_object().centerX\n#     # DistanceExplored=DistanceExplored+range_finder_g.distance(INCHES)/3\n#     # drivetrain.drive_for(FORWARD,(range_finder_g.distance(INCHES))/3,INCHES)\n#     brain.screen.print(center, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n#     brain.screen.next_row()\n#     # Center the Claw on the Object\n#     drivetrain.set_turn_velocity(2, PERCENT)\n#     wait(2, SECONDS)\n#     while math.fabs(center - 180) > 3:\n#         if center < 180:\n#             drivetrain.turn(LEFT)\n#         else:\n#             drivetrain.turn(RIGHT)\n#         if RedFound == 1:\n#             vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_BALL)\n#         else:\n#             vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__YELLOW_BALL)\n#         center = VisionSensor.largest_object().centerX\n#         wait(5, MSEC)\n#     drivetrain.stop()\n#     Angle2=drivetrain.heading(DEGREES)\n#     wait(0.1, SECONDS)\n#     brain.screen.print(\"Centered\")\n#     drivetrain.set_drive_velocity(10,PERCENT)\n#     rangedistance=range_finder_g.distance(INCHES)\n#     if rangedistance > 18 and rangedistance<200:\n#         AngleDistance2 = rangedistance-18\n#         drivetrain.drive_for(FORWARD,AngleDistance2,INCHES)\n#     wait(2, SECONDS)\n#     while math.fabs(center - 180) > 3:\n#         if center < 180:\n#             drivetrain.turn(LEFT)\n#         else:\n#             drivetrain.turn(RIGHT)\n#         if RedFound == 1:\n#             vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_BALL)\n#         else:\n#             vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__YELLOW_BALL)\n#         center = VisionSensor.largest_object().centerX\n#         wait(5, MSEC)\n#     drivetrain.stop()\n#     wait(0.1, SECONDS)\n#     brain.screen.print(\"Centered Again\")\n#     # Open Claw and Drive to Object\n#     ClawMotor.spin_for(REVERSE, 360, DEGREES)\n#     drivetrain.set_drive_velocity(10, PERCENT)\n#     AngleDistance = distance_20.object_distance(INCHES)-3.66\n#     ArmMotor.spin_to_position(10, DEGREES)\n#     drivetrain.drive_for(FORWARD,AngleDistance,INCHES)\n#     wait(1, SECONDS)\n#     ClawMotor.spin_for(FORWARD, 270, DEGREES)\n#     wait(1, SECONDS)\n#     ArmMotor.spin_for(FORWARD, 180, DEGREES)\n#     wait(1, SECONDS)\n#     drivetrain.drive_for(REVERSE, AngleDistance, INCHES)\n#     drivetrain.turn_to_heading(Angle2,DEGREES)\n#     drivetrain.drive_for(REVERSE,AngleDistance2,INCHES)\n#     drivetrain.set_drive_velocity(25, PERCENT)\n#     drivetrain.set_turn_velocity(15, PERCENT)\n#     drivetrain.turn_to_heading(0, DEGREES)\n#     drivetrain.drive_for(REVERSE, DistanceExplored, INCHES)\n#     drivetrain.turn_to_heading(180, DEGREES)\n#     wait(1, SECONDS)\n#     ArmMotor.spin_to_position(10, DEGREES)\n#     wait(0.5, SECONDS)\n#     ClawMotor.spin_for(REVERSE, 360, DEGREES)\n#     ArmMotor.spin_to_position(360, DEGREES)\n#     wait(0.5, SECONDS)\n#     drivetrain.turn_to_heading(0, DEGREES)\n#     wait(1, SECONDS)\n#     drivetrain.drive_for(FORWARD, DistanceExplored, INCHES)\n\n# def Search():\n#     global message1, myVariable, center, DistanceExplored, ObjectsFound, Num_Objects, RedFound, YellowFound, AngleDistance, vexcode_visionsensor_objects, vexcode_brain_precision, vexcode_console_precision, vexcode_visionsensor_object_index\n#     brain.screen.clear_screen()\n#     brain.screen.set_cursor(1, 1)\n#     vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_BALL)\n#     if vexcode_visionsensor_objects and len(vexcode_visionsensor_objects) > 0:\n#         brain.screen.print(\"Red Object Found\")\n#         brain.screen.next_row()\n#         RedFound = 1\n#     else:\n#         RedFound = 0\n#     vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__YELLOW_BALL)\n#     if vexcode_visionsensor_objects and len(vexcode_visionsensor_objects) > 0:\n#         brain.screen.print(\"Yellow Object Found\")\n#         brain.screen.next_row()\n#         YellowFound = 1\n#     else:\n#         YellowFound = 0\n#     if RedFound + YellowFound == 0:\n#         brain.screen.print(\"No Objects Found\")\n\n#Calibrates the claw by putting it to a know position\ndef Calibrate_Claw():\n    # Configure the Arm and Claw Motors\n    brain.screen.print(\"Initialize the Claw and Arm\")\n    ArmMotor.set_timeout(2, SECONDS)\n    ArmMotor.set_position(0, DEGREES)\n    ArmMotor.set_stopping(BRAKE)\n    ArmMotor.set_velocity(25, PERCENT)\n    ClawMotor.set_timeout(2, SECONDS)\n    ClawMotor.set_position(0, DEGREES)\n    ClawMotor.set_stopping(BRAKE)\n    ClawMotor.set_velocity(25, PERCENT)\n    wait(1, SECONDS)\n    ArmMotor.spin_to_position(360, DEGREES)\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    wait(1, SECONDS)\n    ClawMotor.spin_for(FORWARD, 360, DEGREES)\n    wait(2, SECONDS)\n    \n    brain.screen.print(\"Complete\")\n\n\ntest()\n","textLanguage":"python","rconfig":[{"port":[1,10,2],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"165","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"up","rev":"down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"close","rev":"open","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"BumperRight","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"BumperLeft","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"VisionSensor","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"GREEN_BALL\",\"parameters\":{\"uMin\":-7055,\"uMax\":-5527,\"uMean\":-6291,\"vMin\":-6231,\"vMax\":-5073,\"vMean\":-5652,\"rgb\":1,\"type\":0,\"name\":\"GREEN_BALL\"},\"range\":5.7},{\"name\":\"RED_BALL\",\"parameters\":{\"uMin\":9969,\"uMax\":12337,\"uMean\":11153,\"vMin\":-2127,\"vMax\":-1741,\"vMean\":-1934,\"rgb\":1,\"type\":0,\"name\":\"RED_BALL\"},\"range\":1.9},{\"name\":\"BLUE_BALL\",\"parameters\":{\"uMin\":-3553,\"uMax\":-2757,\"uMean\":-3155,\"vMin\":6553,\"vMax\":9363,\"vMean\":7958,\"rgb\":1,\"type\":0,\"name\":\"BLUE_BALL\"},\"range\":3.2},{\"name\":\"YELLOW_BALL\",\"parameters\":{\"uMin\":1251,\"uMax\":2431,\"uMean\":1841,\"vMin\":-5393,\"vMax\":-5061,\"vMean\":-5227,\"rgb\":1,\"type\":0,\"name\":\"YELLOW_BALL\"},\"range\":3},{\"name\":\"ORANGE_BALL\",\"parameters\":{\"uMin\":3139,\"uMax\":5029,\"uMean\":4084,\"vMin\":-2617,\"vMax\":-1911,\"vMean\":-2264,\"rgb\":1,\"type\":0,\"name\":\"ORANGE_BALL\"},\"range\":1.4},{\"name\":\"PINK_BALL\",\"parameters\":{\"uMin\":8119,\"uMax\":10161,\"uMean\":9140,\"vMin\":763,\"vMax\":1213,\"vMean\":988,\"rgb\":1,\"type\":0,\"name\":\"PINK_BALL\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[7,8],"name":"range_finder_g","customName":false,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[20],"name":"distance_20","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}