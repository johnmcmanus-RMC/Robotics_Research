{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeftFront = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nRightFront = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nLeftRear = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nRightRear = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nDistance = Distance(Ports.PORT19)\n# vex-vision-config:begin\nVision__REDBALL = Signature(1, 8623, 10263, 9443,-1553, -915, -1234,3, 0)\nVision__YELLOWBALL = Signature(2, 675, 1575, 1125,-4767, -4181, -4474,2.5, 0)\nVision__SIG_3 = Signature(3, 0, 0, 0,0, 0, 0,3, 0)\nVision = Vision(Ports.PORT20, 50, Vision__REDBALL, Vision__YELLOWBALL, Vision__SIG_3)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n# Drive Forward: Drive forward\n# All motors spin forward\n# @parameter inches: number of inches\ndef driveForward(inches):\n    numTurns = inches / 12.0\n    brain.screen.print(\"Drive Forward\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drive Reverse: Drive forward\n# All motors spin reverse\n# @parameter inches: number of inches to move\ndef driveReverse(inches):\n    numTurns = inches / 12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drive Reverse\")\n    brain.screen.next_row()\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Turn right: Tank turn, clockwise\n# Left front and left rear spin forward\n# Right front and right rear spin in reverse\n# @parameter degrees: number of degrees (clockwise) to rotate\ndef turnRight(degrees):\n    temp = degrees / 90.0 \n    numTurns = temp * 1.16 # 1.16 rotations required for 90 degree turn\n    brain.screen.print(\"Turn Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Turn left: tank turn, counter clockwise\n# Left front and left rear spin reverse\n# Right front and right rear spin forward\n# @parameter degrees: number of degrees (counter-clockwise) to rotate\ndef turnLeft(degrees):\n    temp = degrees / 90.0 \n    numTurns = temp * 1.16 # 1.16 rotations required for 90 degree turn\n    brain.screen.print(\"TurnLeft\")\n    brain.screen.next_row()\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drift Right: Move the robot right\n# Left front and right rear spin forward\n# Right front and left rear spin in reverse\n# @parameter inches: number of inches to move right\ndef driftRight(inches):\n    numTurns = inches /12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drift Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Drift Left: Move the robot left\n# Left front and right rear spin in reverse\n# Right front and left rear spin forward\n# @parameter inches: number of inches to move left\ndef driftLeft(inches):\n    numTurns = inches /12.0 # one turn of the motor = 12.0 inches movement\n    brain.screen.print(\"Drift Left\")\n    brain.screen.next_row()\n    LeftFront.spin_for(REVERSE, numTurns, TURNS, wait=False)\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(REVERSE, numTurns, TURNS, wait=False)\n        \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Diagonal Right: Move the robot left\n# Left front and right rear spin forward\n# @parameter numTurns: number of inches to move\ndef diagonalRight(inches):\n    numTurns = inches / 6.0 # one turn of the motor = 6.0 inches movement\n    brain.screen.print(\"Diagonal Right\")\n    brain.screen.next_row()\n    LeftFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    RightRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n        \n    # Wait for the motors to complete their spin\n    while not LeftFront.is_done(): \n        pass\n    return()\n\n# Diagonal Left: Move the robot right\n# Right front and left rear spin forward\n# @parameter inches: number of inches to move\ndef diagonalLeft(inches):\n    numTurns = inches / 6.0 # one turn of the motor = 6.0 inches movement\n    brain.screen.print(\"Diagonal Left\")\n    brain.screen.next_row()\n    RightFront.spin_for(FORWARD, numTurns, TURNS, wait=False)\n    LeftRear.spin_for(FORWARD, numTurns, TURNS, wait=False)\n\n    # Wait for the motors to complete their spin\n    while not RightFront.is_done(): \n        pass\n    return()","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}