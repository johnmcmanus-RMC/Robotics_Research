{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeftFront = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nRightFront = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nLeftRear = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nRightRear = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nDistance = Distance(Ports.PORT19)\n# vex-vision-config:begin\nVision__PINKBALL = Signature(1, -3475, -1311, -2393,5097, 11589, 8343,1.3, 0)\nVision__BLUEBALL = Signature(2, 8763, 9673, 9218,1199, 1895, 1547,4.4, 0)\nVision__YELLOWBALL = Signature(3, 683, 1197, 940,-5091, -4603, -4847,3, 0)\nVision__GREENBALL = Signature(4, -9321, -7047, -8184,-7357, -4783, -6070,2.6, 0)\nVision__ORANGEBALL = Signature(5, 4681, 5681, 5181,-3081, -2511, -2796,2.5, 0)\nVision__REDBALL = Signature(6, 9717, 10781, 10249,-1905, -1269, -1587,1.9, 0)\nVision = Vision(Ports.PORT20, 50, Vision__BLUEBALL, Vision__PINKBALL, Vision__YELLOWBALL, Vision__GREENBALL, Vision__ORANGEBALL, Vision__REDBALL)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\ndef when_started1():\n    global myVariable\n    # Set up motors\n    LeftFront.set_stopping(BRAKE)\n    RightFront.set_stopping(BRAKE)\n    LeftRear.set_stopping(BRAKE)\n    RightRear.set_stopping(BRAKE)\n\n    # sert motor speeds\n    LeftFront.set_velocity(35, PERCENT)\n    RightFront.set_velocity(35, PERCENT)\n    LeftRear.set_velocity(35, PERCENT)\n    RightRear.set_velocity(35, PERCENT)\n\n    # set drian display\n    brain.screen.set_font(FontType.MONO20)\n    brain.screen.set_pen_color(Color.BLUE)\n    brain.screen.print(\"Starting\")\n    brain.screen.next_row()\n    wait(1, SECONDS)\n\n# Takes a snapshot for each of the color signatures and stores them in a list\ndef take_snapshots():\n    signatures=[Vision__REDBALL,Vision__ORANGEBALL,Vision__YELLOWBALL,Vision__GREENBALL,Vision__PINKBALL,Vision__BLUEBALL]\n    objectsFound=[0]*len(signatures)\n    for i in range(len(signatures)):\n        objectsFound[i] = Vision.take_snapshot(signatures[i])\n    return objectsFound\n\n# Prints the properties of a vision object\n# visionObject: the results from a vision sensor for a particular color signature\ndef printProperties(visionObject):\n    result = isinstance(visionObject, tuple)\n    if result:\n        if (len(visionObject)) > 1:\n            for i in range(len(visionObject)): \n                #Calculate angle\n                angle1=math.atan(((158-visionObject[i].centerX)/158)*math.tan(33*math.pi/180))\n                angle1=angle1*180/math.pi\n                brain.screen.print(\"%d Center X: %d, Width: %d, Angle: %.2f\"% (i+1, visionObject[i].centerX,visionObject[i].width,angle1))\n                brain.screen.next_row()\n\n        else:\n            angle1=math.atan(((158-visionObject[0].centerX)/158)*math.tan(33*math.pi/180))\n            angle1=angle1*180/math.pi\n            brain.screen.print(\"Center X: %d, Width: %d, Angle: %.2f\"% (visionObject[0].centerX,visionObject[0].width,angle1))\n            brain.screen.next_row()\n    \n    # if Distance.is_object_detected():\n    #     distanceToObject = Distance.object_distance(INCHES)\n    #     brain.screen.print(\"The distance to the object is: %.2f inches\" % distanceToObject)\n    #     brain.screen.next_row()\n    # wait(3, SECONDS)\n    \n#Reports the number and properties of each object, updated every second\ndef continousMonitoring():\n    while True:\n        objects=take_snapshots()\n        # Create summary of number of each object seen\n        colorAbr=[\"R\",\"O\",\"Y\",\"G\",\"B\",\"P\"]\n        numSeen=[0]*len(objects)\n        for i in range(len(objects)):\n            if objects[i] is not None:\n                numSeen[i]=len(objects[i])\n            brain.screen.print(\"%s,%d; \"%(colorAbr[i],numSeen[i]))\n        brain.screen.next_row()\n        \n        #print out the data for each color where objects were detected\n        for i in range(len(objects)):\n            if objects[i] is not None:\n                brain.screen.print(colorAbr[i])\n                brain.screen.next_row()\n                printProperties(objects[i])\n        wait(1, SECONDS)\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1,1)\n\ndef main():\n    distanceToObject = 0\n    # 1 turn = 12 inches in forward and reverse\n    # 1 turn = 12 inches in diagonal\n    # 1.15 turns = 90 degrees in rotation\n    \n    turns = 1\n    inchesToMove = 12\n\n    when_started1()\n    objects=take_snapshots()\n    # Create summary of number of each object seen\n    colorAbr=[\"R\",\"O\",\"Y\",\"G\",\"B\",\"P\"]\n    numSeen=[0]*len(objects)\n    for i in range(len(objects)):\n        if objects[i] is not None:\n            numSeen[i]=len(objects[i])\n        brain.screen.print(\"%s,%d; \"%(colorAbr[i],numSeen[i]))\n    brain.screen.next_row()\n    wait(2,SECONDS)\n\n    #print out the data for each color where objects were detected\n    for i in range(len(objects)):\n        if objects[i] is not None:\n            brain.screen.print(colorAbr[i])\n            brain.screen.next_row()\n            printProperties(objects[i])\n    continousMonitoring()\n\n\n# call the main module\nmain()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"LeftFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"RightFront","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"LeftRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"RightRear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[20],"name":"Vision","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBALL\",\"parameters\":{\"uMin\":-3475,\"uMax\":-1311,\"uMean\":-2393,\"vMin\":5097,\"vMax\":11589,\"vMean\":8343,\"rgb\":1,\"type\":0,\"name\":\"BLUEBALL\"},\"range\":1.3},{\"name\":\"PINKBALL\",\"parameters\":{\"uMin\":8763,\"uMax\":9673,\"uMean\":9218,\"vMin\":1199,\"vMax\":1895,\"vMean\":1547,\"rgb\":1,\"type\":0,\"name\":\"PINKBALL\"},\"range\":4.4},{\"name\":\"YELLOWBALL\",\"parameters\":{\"uMin\":683,\"uMax\":1197,\"uMean\":940,\"vMin\":-5091,\"vMax\":-4603,\"vMean\":-4847,\"rgb\":1,\"type\":0,\"name\":\"YELLOWBALL\"},\"range\":3},{\"name\":\"GREENBALL\",\"parameters\":{\"uMin\":-9321,\"uMax\":-7047,\"uMean\":-8184,\"vMin\":-7357,\"vMax\":-4783,\"vMean\":-6070,\"rgb\":1,\"type\":0,\"name\":\"GREENBALL\"},\"range\":2.6},{\"name\":\"ORANGEBALL\",\"parameters\":{\"uMin\":4681,\"uMax\":5681,\"uMean\":5181,\"vMin\":-3081,\"vMax\":-2511,\"vMean\":-2796,\"rgb\":8147773.776442308,\"type\":0,\"name\":\"ORANGEBALL\"},\"range\":2.5},{\"name\":\"REDBALL\",\"parameters\":{\"uMin\":9717,\"uMax\":10781,\"uMean\":10249,\"vMin\":-1905,\"vMax\":-1269,\"vMean\":-1587,\"rgb\":6434342.654432133,\"type\":0,\"name\":\"REDBALL\"},\"range\":1.9},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}