{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nArmMotor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nClawMotor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# vex-vision-config:begin\nVision = Vision(Ports.PORT9, 50)\n# vex-vision-config:end\ndistance_20 = Distance(Ports.PORT20)\nLeftBumper = Bumper(brain.three_wire_port.a)\nRightBumper = Bumper(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nmyNumber = 0.0\nbrain.screen.set_font(FontType.MONO30)\nbrain.screen.set_fill_color(Color.BLUE)\n\n# Begin project code\ndef autonomous():\n    brain.screen.print(\"Starting Up\")\n    brain.screen.next_row()\n\n    wait(1, SECONDS)\n    print(\"Starting up\")\n    currHeading = drivetrain.heading(DEGREES)\n    brain.screen.print(\"Initial Heading: \", currHeading)\n    brain.screen.next_row()\n    # Set heading to 90.0\n    heading = 90.0\n\n    for repeat_count in range(3): \n        drivetrain.turn_to_heading(heading, DEGREES)\n        wait(1, SECONDS)\n        currHeading = drivetrain.heading(DEGREES)\n        \n        # Calculate the heading error\n        diff = heading - currHeading\n        brain.screen.print(\"Error:\", diff)\n        brain.screen.next_row()\n\n        if diff > 0.50: \n            drivetrain.turn_for(RIGHT, diff, DEGREES)\n            brain.screen.print(\"Turn Right: %.2f degrees\" % diff)\n            brain.screen.next_row()\n        elif diff < -0.50:\n            drivetrain.turn_for(LEFT, -diff, DEGREES)\n            brain.screen.print(\"Turn Left: %.2f degrees\" % -diff)\n            brain.screen.next_row()\n        else:\n            brain.screen.print(\"No Turn:\")\n            brain.screen.next_row()\n\n        wait(1, SECONDS)\n        \n        # Update the current heading\n        currHeading = drivetrain.heading(DEGREES)\n        brain.screen.print(\"Current Heading:\", currHeading)\n        brain.screen.next_row()\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1,1)\n\n        # Update the next heading\n        if heading <= 270.0: \n            heading = heading + 90.0\n        else:\n            heading = 360.0\n\n    drivetrain.turn_to_heading(360.0, DEGREES)\n    wait(1, SECONDS)\n\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n\n    # Update the current heading\n    currHeading = drivetrain.heading(DEGREES)\n    brain.screen.print(\"Current Heading:\", currHeading)\n    brain.screen.next_row()\n   \n\ndef configureDrivetrain():\n    brain.screen.print(\"Configure Drivetrain\")\n    brain.screen.next_row()\n    drivetrain.set_drive_velocity(30, PERCENT)\n    drivetrain.set_turn_velocity(15, PERCENT)\n    drivetrain.set_stopping(BRAKE)\n    drivetrain.set_heading(0.0, DEGREES)\n\n# start the program\ncalibrate_drivetrain()\nconfigureDrivetrain()\nautonomous()\nbrain.screen.print(\"All Done\")","textLanguage":"python","rconfig":[{"port":[1,10,2],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"Vision","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[20],"name":"distance_20","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[1],"name":"LeftBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"RightBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":true,"target":"Physical"}