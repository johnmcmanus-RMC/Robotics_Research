{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 165, MM, 1)\nArmMotor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nClawMotor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nBumperRight = Bumper(brain.three_wire_port.a)\nBumperLeft = Bumper(brain.three_wire_port.b)\n# vex-vision-config:begin\nVisionSensor__RED_OBJ = Signature(1, 8457, 10203, 9330,-2785, -1245, -2015,2.7, 0)\nVisionSensor__YELLOW_OBJ = Signature(2, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor__SIG_3 = Signature(3, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor__SIG_4 = Signature(4, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor__SIG_6 = Signature(6, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor__SIG_7 = Signature(7, 0, 0, 0,0, 0, 0,3, 0)\nVisionSensor = Vision(Ports.PORT9, 50, VisionSensor__RED_OBJ, VisionSensor__YELLOW_OBJ, VisionSensor__SIG_3, VisionSensor__SIG_4, VisionSensor__SIG_5, VisionSensor__SIG_6, VisionSensor__SIG_7)\n# vex-vision-config:end\nrange_finder_g = Sonar(brain.three_wire_port.g)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_visionsensor_objects = None\nvexcode_visionsensor_object_index = None\nmessage1 = Event()\nmyVariable = 0\ncenter = 0\n\ndef when_started1():\n    global message1, myVariable, center, vexcode_brain_precision, vexcode_console_precision, vexcode_visionsensor_objects, vexcode_visionsensor_object_index\n    brain.screen.set_font(FontType.MONO40)\n    brain.screen.print(\"Calibrate the Drivetrain\")\n    calibrate_drivetrain()\n    # Set the Drive and Turn Speeds\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.set_turn_velocity(15, PERCENT)\n    # Configure the Arm and Claw Motors\n    brain.screen.print(\"Initialize the Claw and Arm\")\n    brain.screen.print(len(vexcode_visionsensor_objects) if vexcode_visionsensor_objects else 0, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    ArmMotor.set_timeout(2, SECONDS)\n    ArmMotor.set_position(0, DEGREES)\n    ArmMotor.set_stopping(BRAKE)\n    ArmMotor.set_velocity(25, PERCENT)\n    ClawMotor.set_timeout(2, SECONDS)\n    ClawMotor.set_position(0, DEGREES)\n    ClawMotor.set_stopping(BRAKE)\n    ClawMotor.set_velocity(25, PERCENT)\n    wait(2, SECONDS)\n    ArmMotor.spin_to_position(360, DEGREES)\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    wait(2, SECONDS)\n    ArmMotor.spin_to_position(200, DEGREES)\n    ClawMotor.spin_for(FORWARD, 360, DEGREES)\n    wait(2, SECONDS)\n    ArmMotor.spin_to_position(50, DEGREES)\n    wait(2, SECONDS)\n    brain.screen.print(\"Complete\")\n    # Slowly Spin until a Red Object is Detected\n    wait(2, SECONDS)\n    while not (vexcode_visionsensor_objects and len(vexcode_visionsensor_objects) > 0):\n        drivetrain.turn_for(RIGHT, 30, DEGREES)\n        drivetrain.stop()\n        vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_OBJ)\n        wait(1, SECONDS)\n        wait(5, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"Red Object Found\")\n    brain.screen.next_row()\n    wait(1, SECONDS)\n    brain.screen.print(range_finder_g.distance(INCHES), precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    wait(1, SECONDS)\n    vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_OBJ)\n    wait(1, SECONDS)\n    brain.screen.print(len(vexcode_visionsensor_objects) if vexcode_visionsensor_objects else 0, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    center = VisionSensor.largest_object().centerX\n    brain.screen.print(center, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.next_row()\n    # Center the Claw on the Object\n    drivetrain.set_turn_velocity(5,PERCENT)\n    wait(2, SECONDS)\n    while math.fabs(center - 180) > 3:\n        if center < 180:\n            drivetrain.turn(LEFT)\n        else:\n            drivetrain.turn(RIGHT)\n        vexcode_visionsensor_objects = VisionSensor.take_snapshot(VisionSensor__RED_OBJ)\n        center = VisionSensor.largest_object().centerX\n        wait(5, MSEC)\n    drivetrain.stop()\n    wait(0.1, SECONDS)\n    brain.screen.print(\"Centered\")\n    # Open Claw and Drive to Object\n    ClawMotor.spin_for(REVERSE, 360, DEGREES)\n    drivetrain.set_drive_velocity(10,PERCENT)\n    drivetrain.drive(FORWARD)\n    while not range_finder_g.distance(INCHES) < 6:\n        wait(5, MSEC)\n    drivetrain.stop()\n    ClawMotor.spin_for(FORWARD, 120, DEGREES)\n    wait(2, SECONDS)\n    ArmMotor.spin_for(FORWARD, 90, DEGREES)\n    wait(2, SECONDS)\n    ArmMotor.spin_for(REVERSE, 90, DEGREES)\n    ClawMotor.spin_for(REVERSE, 120, DEGREES)\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[1,10,2],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"165","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"up","rev":"down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"close","rev":"open","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"BumperRight","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"BumperLeft","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"VisionSensor","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"RED_OBJ\",\"parameters\":{\"uMin\":8457,\"uMax\":10203,\"uMean\":9330,\"vMin\":-2785,\"vMax\":-1245,\"vMean\":-2015,\"rgb\":1,\"type\":0,\"name\":\"RED_OBJ\"},\"range\":2.7},{\"name\":\"YELLOW_OBJ\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"YELLOW_OBJ\"},\"range\":3},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":3},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":3},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[7,8],"name":"range_finder_g","customName":false,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.0","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}